generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  password         String
  emailVerified    DateTime?
  image            String?
  role             UserRole       @default(FREE)
  accounts         Account[]
  sessions         Session[]
  images           Image[]
  subscription     Subscription?
  generationCount  Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id          String   @id @default(cuid())
  cloudinaryUrl String
  prompt      String   @db.Text @unique // Make 'prompt' unique
  userId      String
  userName    String?
  userAvatar  String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}


model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String?  @unique
  stripePriceId    String?
  stripeSubscriptionId String? @unique
  status           SubscriptionStatus
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GUEST
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}